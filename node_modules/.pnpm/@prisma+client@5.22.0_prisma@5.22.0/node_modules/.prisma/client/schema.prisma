// Supreme Price Tracker Database Schema
// Based on memory-bank/systemPatterns.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core item information
model Item {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  brand       String    @default("Supreme")
  imageUrl    String?   @map("image_url")
  season      String?
  styleCode   String?   @map("style_code")
  description String?
  retailUsd   Decimal?  @map("retail_usd") @db.Decimal(10, 2)
  releaseDate DateTime? @map("release_date")
  releaseWeek String?   @map("release_week")
  // StockX integration
  // stockxProductId String? @unique @map("stockx_product_id") // Moved to Variant

  images    ItemImage[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  variants Variant[]
  // stockxPrices StockXPrice[] // Moved to Variant

  @@map("items")
}

// Item variants (size, color combinations)
model Variant {
  id              String  @id @default(cuid())
  slug            String  @unique
  itemId          String  @map("item_id")
  size            String
  color           String
  stockxProductId String? @unique @map("stockx_product_id")

  // Relations
  item         Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  prices       Price[]
  alerts       PriceAlert[]
  watchlists   Watchlist[]
  stockxPrices StockXPrice[]

  @@unique([itemId, size, color])
  @@map("variants")
}

// Historical price data (append-only for full history)
model Price {
  id         String    @id @default(cuid())
  variantId  String    @map("variant_id")
  platform   Platform
  priceUsd   Decimal   @map("price_usd") @db.Decimal(10, 2)
  currency   String    @default("USD")
  askOrBid   PriceType @map("ask_or_bid")
  capturedAt DateTime  @default(now()) @map("captured_at")

  // Relations
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId, platform, capturedAt])
  @@index([capturedAt])
  @@map("prices")
}

// User accounts and authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  watchlist Watchlist[]
  alerts    PriceAlert[]

  @@map("users")
}

// User watchlists (followed items)
model Watchlist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  variantId String   @map("variant_id")
  addedAt   DateTime @default(now()) @map("added_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@map("watchlist")
}

// Price alerts for users
model PriceAlert {
  id            String         @id @default(cuid())
  userId        String         @map("user_id")
  variantId     String         @map("variant_id")
  platform      Platform? // null = any platform
  targetPrice   Decimal        @map("target_price") @db.Decimal(10, 2)
  condition     AlertCondition // above, below, equal
  isActive      Boolean        @default(true) @map("is_active")
  lastTriggered DateTime?      @map("last_triggered")
  createdAt     DateTime       @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("price_alerts")
}

// Enums
enum Platform {
  STOCKX  @map("stockx")
  GOAT    @map("goat")
  GRAILED @map("grailed")
}

enum PriceType {
  ASK  @map("ask")
  BID  @map("bid")
  LAST @map("last")
}

enum AlertCondition {
  ABOVE @map("above")
  BELOW @map("below")
  EQUAL @map("equal")
}

model ItemImage {
  id     String @id @default(cuid())
  itemId String @map("item_id")
  url    String @db.Text
  idx    Int

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, idx])
  @@map("item_images")
}

// Snapshots from StockX market endpoint
model StockXPrice {
  id        String   @id @default(cuid())
  variantId String   @map("variant_id")
  type      String // lowestAsk, highestBid, lastSale
  price     Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  fetchedAt DateTime @default(now()) @map("fetched_at")

  // Relations
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId, fetchedAt])
  @@map("stockx_prices")
}
